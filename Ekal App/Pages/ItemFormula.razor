@page "/itemFormula";
@using EkalEntities.Models;
@using Ekal_App.Data;
@inject ItemsService itemService;
@inject ItemFormulaService itemFormulaService;
@inject IToastService toastService;
@inject UnitService unitService;

<h3>Item Formula</h3>
<hr />

@if (items == null)
{
    <p><em>Loading...</em></p>
}
@if (items != null)
{
<EditForm Model="itemFormula">

    <div class="form-row">
        <div class="col-sm-4">
            <label for="inputEmail3" class="col-form-label text-right">Formula Name : </label>
            <input type="text" class="form-control" placeholder="Enter Formula Name" @bind="@itemFormula.FormulaName" />
        </div>
     </div>
    <div class="form-row">
        <div class="col-sm-4">
            <label for="ddlItems" class="col-form-label text-right">Item : </label>
            <CustomInputSelect id="ddlItems" class="form-control" 
                               ValueChanged="@((int value) => ItemHasChanged(value))"
                                   ValueExpression="@(() => selectedItemID)"
                                   Value="@selectedItemID">
                @if (items != null)
                {
                    @foreach (var _item in items)
                    {
                        <option value=@_item.ItemId>@_item.ItemName</option>
                    }
                }
            </CustomInputSelect>
            <label  class="col-form-label text-right">/@ItemUnit</label>
        </div>

        <div class="col-sm-4">
            <label for="inputEmail3" class="col-form-label text-right">For Qty : </label>
            <input type="text" class="form-control" placeholder="Enter Qty" @bind-value="@itemFormula.ForQty" />
        </div>
        <div class="col-sm-4" style="padding-top: 37px">
            
            <button @onclick="@Save" class="btn btn-warning px-5">Add</button>
        </div>
    </div>

</EditForm>
}


@code {

    List<TxnItemFormula> lstItemFormula = null;
    List<MstItems> items = null;
    string ItemUnit = string.Empty;

    int selectedItemID = 0;

    TxnItemFormula itemFormula = new TxnItemFormula();

    protected override async Task OnInitializedAsync()
    {
        await LoadItemsAsync();
    }

    private async Task LoadItemsAsync()
    {
        items = await itemService.GetAsync();
        items.Insert(0, new MstItems { ItemId = 0, ItemName = "SELECT" });
    }

    private async Task ItemHasChanged(int value)
    {
        selectedItemID = value;
        if (value == 0)
            items.Clear();
        else
        {
            itemFormula.ItemId = value;
            //Getting selected Item Unit
            var selectedItemUnitID = items.Where(x => x.ItemId == selectedItemID).FirstOrDefault().UnitId;
            var unitInfo = await unitService.GetAsync((short)selectedItemUnitID);
            ItemUnit = unitInfo.Unit;
        }
    }


    public async Task Save()
    {
        itemFormula.ItemId = selectedItemID;

        var response = await itemFormulaService.AddAsync(itemFormula);
        if (response)
        {
            await LoadItemsAsync();
            ResetFields();
        }
    }

    private bool ValidateFields()
    {
        if (string.IsNullOrEmpty(itemFormula.FormulaName))
        {
            toastService.ShowError("Please enter formula name.");
            return false;
        }
        else
            return true;
    }

    private void ResetFields()
    {
        itemFormula.ItemId = 0;
        itemFormula.FormulaName = string.Empty;
        selectedItemID = 0;
    }

}
