@page "/itemFormulaDetails";
@using EkalEntities.Models;
@using Ekal_App.Data;

@inject ItemFormulaService formulaService;
@inject ItemFormulaDetailsService formulaDetailsService;
@inject ItemsService itemService;
@inject UnitService unitService;

@inject IToastService toastService;

<h3>Formula Details</h3>
<hr />


@if (formulas == null)
{
    <p><em>Loading...</em></p>
}
else
{
<EditForm Model="itemFormulaDetails">
    <div class="form-row">
        <div class="col-sm-4">
            <label for="ddlFormula" class=" col-form-label text-right">Formula : </label>
            <select id="ddlFormula" class="form-control" @bind="@selectedFormulaID">
                @if (formulas != null)
                {
                    @foreach (var _formula in formulas)
                    {
                        <option value=@_formula.ItemFormulaId>@_formula.FormulaName</option>
                    }
                }
            </select>
        </div>
        </div>
    <div class="form-row">
        <div class="col-sm-4">
            <label for="ddlItem" class=" col-form-label text-right">Item : </label>
            <CustomInputSelect id="ddlItems" class="form-control"
                               ValueChanged="@((int value) => ItemHasChanged(value))"
                               ValueExpression="@(() => selectedItemID)"
                               Value="@selectedItemID">
                @if (items != null)
                {
                    @foreach (var _item in items)
                    {
                        <option value=@_item.ItemId>@_item.ItemName</option>
                    }
                }
            </CustomInputSelect>
            <label class="col-form-label text-right">/@ItemUnit</label>
        </div>
        <div class="col-sm-4">
            <label for="itemQty" class=" col-form-label text-right">Qty : </label>
            <input id="itemQty" type="text" class="form-control" placeholder="Enter Qty" @bind="@itemQty" />
        </div>
        <div class="col-sm-4" style="padding-top: 37px">
            <button @onclick="@AddItems" class="btn btn-warning px-4">Add</button>

        </div>
    </div>

    <div class="mt-3">
        <DataGrid TItem="TxnItemFormulaDetails" Data="@lstFormulaDetails" Sortable="true" ShowPager="true" PageSize="10" Filterable="true"
                  Style="overflow-x:scroll" Bordered="true">

            <DataGridColumn TItem="TxnItemFormulaDetails" Field="@nameof(TxnItemFormulaDetails.ItemFormulaDetailsId)" Caption="ItemFormulaDetailsId" Displayable="false"></DataGridColumn>
            <DataGridColumn TItem="TxnItemFormulaDetails" Field="@nameof(TxnItemFormulaDetails.SubItemId)" Caption="Item"></DataGridColumn>
            <DataGridColumn TItem="TxnItemFormulaDetails" Field="@nameof(TxnItemFormulaDetails.Qty)" Caption="Qty"></DataGridColumn>
        </DataGrid>
    </div>
    <button @onclick="@Save" class="btn btn-warning">Save</button>


</EditForm>
}

@code {
    decimal itemQty = 0;

    int selectedFormulaID = 0;
    int selectedItemID = 0;
    string ItemUnit = string.Empty;

    List<TxnItemFormula> formulas = null;
    List<MstItems> items = null;

    List<TxnItemFormulaDetails> lstFormulaDetails = null;

    TxnItemFormulaDetails itemFormulaDetails = new TxnItemFormulaDetails();


    protected override async Task OnInitializedAsync()
    {
        await LoadItemFormulaAsync();
        await LoadItemsAsync();
    }

    private async Task LoadItemFormulaAsync()
    {
        formulas = await formulaService.GetAsync();
        formulas.Insert(0, new TxnItemFormula { ItemFormulaId = 0, FormulaName = "SELECT" });

    }
    private async Task LoadItemsAsync()
    {
        items = await itemService.GetAsync();
        items.Insert(0, new MstItems { ItemId = 0, ItemName = "SELECT" });

    }

    private async Task ItemHasChanged(int value)
    {
        selectedItemID = value;
        if (value == 0)
            items.Clear();
        else
        {
            itemFormulaDetails.SubItemId = value;
            //Getting selected Item Unit
            var selectedItemUnitID = items.Where(x => x.ItemId == selectedItemID).FirstOrDefault().UnitId;
            var unitInfo = await unitService.GetAsync((short)selectedItemUnitID);
            ItemUnit = unitInfo.Unit;
        }
    }

    public async Task Save()
    {
        if (lstFormulaDetails != null)
        {
            var response = await formulaDetailsService.AddRangeAsync(lstFormulaDetails);
            if (response)
            {
                await LoadItemsAsync();
                ResetFields();
            }
        }
        else
        {
            toastService.ShowInfo("There are no items for save.");
        }
    }

    private void ResetFields()
    {
        selectedFormulaID = 0;
        selectedItemID = 0;
        itemQty= 0;
    }

    public void AddItems()
    {
        if (lstFormulaDetails == null)
            lstFormulaDetails = new List<TxnItemFormulaDetails>();

        if (ValidateFields())
        {
            TxnItemFormulaDetails entity = new TxnItemFormulaDetails();
            entity.ItemFormulaId = selectedFormulaID;
            entity.SubItemId = selectedItemID;
            entity.Qty = itemQty;

            lstFormulaDetails.Add(entity);
        }
    }

    private bool ValidateFields()
    {
        if (selectedFormulaID == 0)
        {
            toastService.ShowError("Please select Formula.");
            return false;
        }
        if (selectedItemID == 0)
        {
            toastService.ShowError("Please select Item.");
            return false;
        }
        return true;
    }
}
