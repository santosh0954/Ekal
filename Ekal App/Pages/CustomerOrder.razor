@page "/customerOrder"
@using EkalEntities.Models;
@using EkalEntities.CustomModels; 
@using Ekal_App.Data; 

@inject ItemsService itemService;
@inject CustomerService customerService;
@inject CustomerOrderService orderService;

<h3>Customer Order</h3>
<hr/>

<EditForm Model="customerOrder" >
    <div class="form-group form-row">
        <div class="col-sm-3">
    <label for="ddlCustomer" class="col-form-label">Customer :</label>

    <CustomInputSelect id="ddlCustomer" class="form-control"
                       @bind-Value="@selectedCustomerID">
        <option>SELECT</option>
        @foreach (TxnCustomer customer in customers)
        {
            @if (customer.CustomerId == selectedCustomerID)
            {
                <option selected value="@customer.CustomerId">@customer.FirstName @customer.MiddleName</option>
            }
            else
            {
                <option value="@customer.CustomerId">@customer.FirstName @customer.MiddleName</option>
            }
        }
    </CustomInputSelect>

        </div>
        <div class="col-sm-3">
        <label for="txtOrderNo" class="col-form-label">OrderNo :</label>
        <InputText id="txtOrderNo" class="form-control" @bind-Value="@customerOrder.OrderNo" />

        </div>
        <div class="col-sm-3" style="padding-top: 35px">
        <InputDate id="dtOrderDate" class="form-control" @bind-Value="@customerOrder.OrderDate" />

        </div>
    </div>
    <div class="form-group form-row">
        <div class="col-sm-3">
        <label for="ddlItem" class="col-form-label">Item :</label>
        <CustomInputSelect id="ddlItem" @bind-Value="@selectedItemID" class="form-control">
            <option>SELECT</option>
            @foreach (MstItems item in items)
            {
                @if (item.ItemId == selectedItemID)
                {
                    <option selected value="@item.ItemId">@item.ItemName </option>
                }
                else
                {
                    <option value="@item.ItemId">@item.ItemName </option>
                }
            }
        </CustomInputSelect>

        </div>
        <div class="col-sm-3">
        <label for="txtQty" class="col-form-label">Qty :</label>

        <InputNumber id="txtQty" @bind-Value="@InputQty" class="form-control" />

        </div>
        <div class="col-sm-3" style="padding-top: 35px;">
            <button @onclick="@AddItem" class="btn btn-success px-5">Add</button>
        </div>
    </div>

</EditForm>

<div>
    <DataGrid TItem="OrderDetails" Data="@lstOrderDetails" Sortable="true" ShowPager="true" PageSize="10" Filterable="true" Style="overflow-x:scroll" Bordered="true">

        <DataGridColumn TItem="OrderDetails" Field="@nameof(OrderDetails.ItemName)" Caption="Item"></DataGridColumn>
        <DataGridColumn TItem="OrderDetails" Field="@nameof(OrderDetails.Rate)" Caption="Rate"></DataGridColumn>
        <DataGridColumn TItem="OrderDetails" Field="@nameof(OrderDetails.Qty)" Caption="Qty"></DataGridColumn>
        <DataGridColumn TItem="OrderDetails" Field="@nameof(OrderDetails.Amount)" Caption="Amount"></DataGridColumn>

    </DataGrid>   
</div>
<div class="form-group row">
    <div class="col-lg-4 col-md-4 col-sm-10 mx-auto">
        <button @onclick="@Save" class="btn btn-success px-5">Save</button>
    </div>
</div>


@code {
    TxnCustomerOrder customerOrder = new TxnCustomerOrder();
    List<TxnCustomerOrderDetails> lstCustomerOrderDetails = new List<TxnCustomerOrderDetails>();
    List<OrderDetails> lstOrderDetails = new List<OrderDetails>();

    public int selectedCustomerID { get; set; }
    public int selectedItemID { get; set; }
    public int InputQty { get; set; }

    List<TxnCustomer> customers = new List<TxnCustomer>();
    List<MstItems> items = new List<MstItems>();

    protected async override Task OnInitializedAsync()
    {
        await LoadItems();
        await LoadCustomers();
        await GetNextOrderNo();
    }

    private async Task LoadItems()
    {
        items = await itemService.GetAsync();
    }

    private async Task GetNextOrderNo()
    {
        var orderNo = await orderService.GetNextOrderNoAsync();
        customerOrder.OrderNo = orderNo;
    }

    private async Task LoadCustomers()
    {
        customers = await customerService.GetAsync();
    }

    private void AddItem()
    {
        OrderDetails orderDetail = new OrderDetails();
        orderDetail.ItemID = selectedItemID;
        orderDetail.Qty = (short)InputQty;

        //Getting ItemName 
        var selectedItem = items.Where(x => x.ItemId == selectedItemID).FirstOrDefault();
        orderDetail.ItemName = selectedItem.ItemName;
        orderDetail.Rate = (decimal)selectedItem.SaleRate;
        orderDetail.Amount = (decimal)(orderDetail.Qty * selectedItem.SaleRate);

        lstOrderDetails.Add(orderDetail);
        StateHasChanged();
    }

    private async void Save()
    {
        foreach (OrderDetails orderDetail in lstOrderDetails)
        {
            TxnCustomerOrderDetails cOrderDetails = new TxnCustomerOrderDetails();

            cOrderDetails.OrderId = customerOrder.CustomerOrderId;
            cOrderDetails.ItemId = orderDetail.ItemID;
            cOrderDetails.Qty = (short)orderDetail.Qty;
            cOrderDetails.Rate = orderDetail.Rate;
            cOrderDetails.Amount = orderDetail.Amount;

            lstCustomerOrderDetails.Add(cOrderDetails);
        }

        customerOrder.CustomerId = selectedCustomerID;

        customerOrder.TxnCustomerOrderDetails = lstCustomerOrderDetails;
        customerOrder.CreatedDate = DateTime.Now;
        customerOrder.CreatedBy = Common.UserProfileID;
        var response=await orderService.AddAsync(customerOrder);
    }
}
